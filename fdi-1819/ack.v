(* Test√© avec Coq 8.8.2 *)

Require Import Lia.

(* On formalise les fonctions primitives r√©cursives. *)

(* Pour ne pas avoir √† aplanir des tuples tout le temps, on d√©finit un petit
syst√®me de types. Ici, tous les types seront, √† associativit√© du produit pr√®s,
isomorphes √† des ‚Ñï puissance quelque chose. *)
Inductive ty :=
  ty_unit : ty
| ty_N : ty
| ty_prod : ty -> ty -> ty.

Notation "'ùüô'" := ty_unit.
Notation "œÑ √ó œÉ" := (ty_prod œÑ œÉ) (at level 62).
Notation "'‚Ñï'" := ty_N.

(* Les types ont une interpr√©tation ensembliste directe.
   La classe des fonctions r√©cursive sera incluse dans l'union des
     interp_ty œÑ -> interp_ty œÉ
   pour œÑ, œÉ types.
*)
Fixpoint interp_ty (œÑ : ty) : Type :=
  match œÑ with
  | ùüô => unit
  | ‚Ñï => nat
  | œÑ √ó œÉ => prod (interp_ty œÑ) (interp_ty œÉ)
  end.

(* Pour illustrer la chose, quelque fonctions.
   - "zerotuple : interp_ty œÑ" construit l'√©lement de interp_ty œÑ correspondant √† un
     tuple de 0.
   - "sumtuple : interp_ty œÑ -> nat" calcule la somme des √©l√©ments du tuple
*)

Fixpoint zero_tuple (œÑ : ty) : interp_ty œÑ :=
  match œÑ with
    ùüô => tt
  | ‚Ñï => 0
  | œÉ √ó Œ∫ => (zero_tuple œÉ, zero_tuple Œ∫)
  end.

Fixpoint sumtuple {œÑ} :=
  match œÑ return interp_ty œÑ -> nat with
    ùüô => fun _ => 0
  | œÑ √ó œÉ => fun x => let (a,b) := x in
                      (@sumtuple œÑ a) + (@sumtuple œÉ b)
  | ‚Ñï => fun n => n
  end.

(* Les fonctions primitives r√©cursives sont g√©n√©r√©es par une syntaxe assez naturelle,
index√©e par les types.

On commente les diff√©rents √©l√©ments de syntaxe introduits, et histoire d'√™tre un peu
plus clair, des √©quations qui doivent √™tre satisfaites dans la s√©mantique. Histoire de
coller au formalisme, ces derni√®res sont toutes donn√©s en termes de composition de
fonctions, un √©nonc√© du type "f ‚â° g" voulant dire "pour tout x du bon type
'‚ü¶ f ‚üß x = ‚ü¶ g ‚üß x'" o√π ‚ü¶.‚üß est une fonction d'interpr√©tation.  *)

Inductive primrec : ty -> ty -> Type :=
  pr_comp : forall œÑ œÉ Œ∫, primrec œÑ œÉ -> primrec Œ∫ œÑ -> primrec Œ∫ œÉ
| pr_id : forall œÑ, primrec œÑ œÑ
  (* Ces deux premi√®res closes nous assurent que l'on a la cl√¥ture par composition
     et les √©l√©ments neutres. On requi√®rera notamment les √©quations
      (f ‚àò g) ‚àò h ‚â° f ‚àò (g ‚àò h)       [associativit√©]
      f ‚àò pr_id ‚â° f                   [neutre droit]
      pr_id ‚àò f ‚â° f                   [neutre gauche]
   *)
| pr_unit : forall œÑ, primrec œÑ ùüô
| pr_pairing : forall œÑ œÉ Œ∫, primrec œÑ œÉ -> primrec œÑ Œ∫ -> primrec œÑ (œÉ √ó Œ∫)
| pr_proj1 : forall œÑ œÉ, primrec (œÑ √ó œÉ) œÑ
| pr_proj2 : forall œÑ œÉ, primrec (œÑ √ó œÉ) œÉ
   (* Ici on demande assez de structure pour g√©rer les produits cart√©siens. 
      En notant "‚ü® f, g ‚ü©" pour "pr_pairing f g", on demande √† avoir
        pr_unit ‚àò f ‚â° pr_unit             [ùüô terminal]
        pr_proj1 ‚àò ‚ü®f, g‚ü© ‚â° f             [premi√®re projection]
        pr_proj2 ‚àò ‚ü®f, g‚ü© ‚â° g             [seconde projection]
        ‚ü® pr_proj1 , pr_proj2 ‚ü© ‚â° pr_id   [surjective pairing]
      
   *)
| pr_zero : primrec ùüô ‚Ñï
| pr_succ : primrec ‚Ñï ‚Ñï
| pr_rec : forall œÑ œÉ, primrec œÑ œÉ -> primrec (œÑ √ó œÉ) œÉ -> primrec (œÑ √ó ‚Ñï) œÉ
   (* Enfin, la structure minimale pour g√©rer les entiers naturels. Les √©quations
      attendues pour le r√©curseur sont:
        pr_rec z r ‚àò ‚ü® pr_id , pr_zero ‚ü© ‚â° z                           [cas n = 0]
        pr_rec z r ‚àò (pr_id √ó pr_succ) ‚â° r ‚àò ‚ü® pr_proj1 , pr_rec z r ‚ü© [cas n = k + 1]
    *)
.

Notation "f ‚àò g" := (pr_comp _ _ _ f g) (at level 62).
Arguments pr_id [_].
Arguments pr_unit [_].
Notation "‚ü® f , g ‚ü©" := (pr_pairing _ _ _ f g).
Arguments pr_proj1 [_ _].
Arguments pr_proj2 [_ _].
Arguments pr_rec [_ _] _ _.

(* On va maintenant d√©finir la fonction d'interpr√©tation ‚ü¶.‚üß. Pour se faire, on code
d'abord des fonctions auxiliaires qui serviront √† interpr√©ter le r√©curseur.

L'id√©e de base du r√©curseur est qu'il sert √† it√©rer une fonction donn√©e sur un argument,
comme la fonction iter ci-dessous. *)
Fixpoint iter {B : Type} (r : B -> B) (z : B) (n : nat) :=
  match n with
    0 => z
  | S k => r (iter r z k)
  end.

(* Dans les fait, la fonction iter ci-dessus correspond au r√©curseur √† param√®tre ùüô. Si le
param√®tre est non-trivial, iter doit √™tre adapt√© pour l'accomoder comme ci-dessous. *)
Definition iter_param {A B : Type} (z : A -> B) (r : (A * B) -> B) :=
  fun (x : A * nat) => let (a,n) := x in iter (fun y => r (a, y)) (z a) n.

Arguments iter_param [_ _] _ _ : simpl never.


(* On est donc pr√™t √† interpr√©ter les fonctions primitives r√©cursives par induction sur
leur syntaxe. *)
Reserved Notation "‚ü¶ f ‚üß".
Fixpoint interp_primrec {œÑ œÉ : ty} (t : primrec œÑ œÉ) : interp_ty œÑ -> interp_ty œÉ :=
  match t with
    f ‚àò g => fun x => ‚ü¶f‚üß (‚ü¶g‚üß x)
  | pr_id => fun x => x
  | pr_unit => fun _ => tt
  | ‚ü® f , g ‚ü© => fun x => (‚ü¶f‚üß x, ‚ü¶g‚üß x)
  | pr_proj1 => fst
  | pr_proj2 => snd
  | pr_zero => fun _ => 0
  | pr_succ => S
  | pr_rec z r => iter_param ‚ü¶z‚üß ‚ü¶r‚üß
  end
where "‚ü¶ t ‚üß" := (@interp_primrec _ _ t).

(* Cette interpr√©tation satisfait bien les √©quations donn√©es en commentaire lors de la
d√©finition de la syntaxe. On pourrait le v√©rifier formellement, mais ici on ne se contente
que de donner des lemmes capturant les √©quations essentielles pour l'interpr√©tation du r√©curseur.

(En r√©alit√© on pourrait m√™me montrer un r√©sultat plus fort que la correction de l'interpr√©tation
vis-√†-vis de la th√©orie √©quationelle: l'interpr√©tation est canonique (initiale) parmis celles qui
satisfont cette th√©orie √©quationnelle)
 *)

Lemma pr_rec_0 : forall œÑ œÉ (z : primrec œÑ œÉ) r a, ‚ü¶pr_rec z r‚üß (a,0) = ‚ü¶ z ‚üß a.
  trivial.
Qed.

Lemma pr_rec_1 : forall œÑ œÉ (z : primrec œÑ œÉ) r a n, ‚ü¶pr_rec z r‚üß (a, S n) = ‚ü¶ r ‚üß (a, ‚ü¶pr_rec z r‚üß (a, n)).
  trivial.
Qed.



(* La fonction d'Ackerman. Noter que la d√©finition est pas forc√©ment intuitive en premi√®re lecture
√† cause d'un passage par l'ordre sup√©rieur. *)
Fixpoint ack (n : nat) : nat -> nat :=
  match n with
    0 => S
  | S k => fix ack_aux (m : nat) :=
            match m with
              0 => ack k 1
            | S k' => ack k (ack_aux k')
            end
  end.

(* On v√©rifie que la d√©finition satisfait bien les m√™mes √©quations que sur le papier. *)
Lemma ack0m : forall m, ack 0 m = S m.
  trivial.
Qed.

Lemma ackn0 : forall n, ack (S n) 0 = ack n 1.
  trivial.
Qed.

Lemma acknm : forall n m, ack (S n) (S m) = ack n (ack (S n) m).
  trivial.
Qed.

(* Calcul explicite de Œª k. ack n k pour n = 1, 2. *)
Lemma ack1m : forall k, ack 1 k = 2 + k.
  induction k; [simpl; lia|].
  rewrite acknm, ack0m; lia.
Qed.

Lemma ack2m : forall k, ack 2 k = 3 + 2 * k.
  induction k; [simpl;lia|].
  rewrite acknm, ack1m; lia.
Qed.

(* On prouve quelques propri√©t√©s √©l√©mentaires de la fonction d'Ackerman, dont la croissance.
On commence donc par poser quelque d√©finitions. *)

(* SC f ‚â° f est strictement croissante *)
Definition SC (f : nat -> nat) := forall n m, n < m -> f n < f m.

(* SC' f ‚â° d√©finition alternative de la croissance stricte pour f *)
Definition SC' (f : nat -> nat) := forall n, f n < f (S n).

(* C f ‚â° f est croissante *)
Definition C (f : nat -> nat) := forall n m, n <= m -> f n <= f m.

(* Les implications triviales SC' -> SC -> C. *)
Lemma SC'SC : forall f, SC' f -> SC f.
  intros ? ? ? ? p; induction p; intros; unfold SC' in *; eauto.
  eapply PeanoNat.Nat.lt_trans; eauto.  
Qed.

Lemma SCC : forall f,  SC f -> C f.
  intros ? ? ? ? p; induction p; intros; unfold SC in *; auto.  
  specialize (H m (S m)); lia.
Qed.

(* La fonction d'ackerman est quasiment toujours > 1. *)
Lemma ack_1 : forall p n, p > 0 \/ n > 0 -> ack p n > 1.
  induction p; induction n; try (simpl; lia).
  + intros _.
    simpl. auto.
  + intros _.
    rewrite acknm.     
    apply IHp.
    lia.
Qed.

(* Croissance stricte dans la seconde composante. *)
Lemma ack_sc'_m : forall n, SC' (ack n).
  induction n; intros m; induction m; try (simpl; lia).    
  + simpl.
    apply SC'SC in IHn.
    apply IHn, ack_1; lia.
  + do 2 rewrite acknm.
    apply SC'SC in IHn. apply IHn; assumption.
Qed.

Lemma ack_sc_m : forall n, SC (ack n).
   intros; apply SC'SC, ack_sc'_m.
Qed.

Lemma ack_c_m : forall n, C (ack n).
  intros; apply SCC, ack_sc_m.
Qed.

(* Croissance stricte en la premi√®re composante. *)
Lemma ack_sc'_n : forall m, SC' (fun n => ack n m).
  intros m n; revert m; induction n; induction m; try (simpl; lia).
  + rewrite acknm.
    apply ack_sc_m, IHm.
  + simpl.
    apply ack_sc_m, ack_1; lia.
  + rewrite acknm.
    eapply PeanoNat.Nat.lt_trans; [apply IHn|].
    change (ack (S (S n)) (S m)) with (ack (S n) (ack (S (S n)) m)).
    apply ack_sc_m, IHm.
Qed.

Lemma ack_sc_n : forall m, SC (fun n => ack n m).
  intros; apply SC'SC, ack_sc'_n.
Qed.

Lemma ack_c_n : forall m, C (fun n => ack n m).
  intros; apply SCC, ack_sc_n.
Qed.


(* Propri√©t√©s importante demand√©es en question 1 *)
Lemma ack_c : forall n m, ack n (S m) <= ack (S n) m.
  assert (Hcm := ack_c_m); assert (Hcn := ack_c_n).
  induction n; induction m; try (simpl; lia).
  + rewrite acknm.
    apply Hcm, IHm.
  + rewrite acknm.
    change (ack (S (S n)) (S m)) with (ack (S n) (ack (S (S n)) m)).
    eapply PeanoNat.Nat.le_trans.
    - apply Hcm, IHm.
    - apply Hcn; lia.
Qed.

Lemma ack2plus : forall k n, 2 * ack k n <= ack (2 + k) n.
  induction k.
  - intros; simpl plus; rewrite ack2m, (ack0m n); lia.
  - destruct n.
    + rewrite ackn0.
      rewrite IHk; apply ack_c.
    + simpl plus; do 2 rewrite acknm.
      rewrite IHk.
      apply ack_c_m, ack_c_n; lia.
Qed.

(* En combinant ack2plus avec la croissance, on obtient le corollaire suivant, utile
   pour raisonner sur les sommes. *)
Lemma ack2plusplus : forall p q k n, p <= ack k n -> q <= ack k n -> p + q <= ack (2 + k) n.
  intros.
  apply PeanoNat.Nat.le_trans with (2 * ack k n); [lia|apply ack2plus].
Qed.

Lemma ack_le_r : forall n m p, n <= m -> n <= ack p m.
   intros.
   apply PeanoNat.Nat.le_trans with (ack 0 n); [simpl;lia|].
   eapply PeanoNat.Nat.le_trans; [eapply ack_c_n|eapply ack_c_m]; lia.
Qed.

(* On prouve par induction la propri√©t√© cruciale qui couvre plusieurs questions du DM.
   La cons√©quence utile est l'√©nonc√© suivant: pour toute fonction primitive r√©cursive
   (f : nat -> nat), il existe (x : nat) tel que pour tout n : nat, f n ‚â§ ack x n.

   On peut noter en particulier les constantes qui apparaissent lors des diff√©rents
   sous-case, dont notamment la composition, le pairing (2 + max k1 k2) et
   le r√©curseur (3 + max k1 k2). 

   NB: la notation { x : A | P x } en Coq correspond √† un type renfor√ßant l'existentielle
   "exists x : A, P x" afin de permettre l'extraction de fonction.
*)

Lemma ack_pr : forall {œÑ œÉ} (f : primrec œÑ œÉ),
    { k | forall x : interp_ty œÑ, sumtuple (‚ü¶f‚üß x) <= ack k (sumtuple x)}.
  induction f; try (exists 0; simpl in *; intros;  lia).
  + destruct IHf1 as [k1 IHf1], IHf2 as [k2 IHf2].
    exists (2 + (max k1 k2)).
    intros x.
    specialize (IHf1 (‚ü¶f2‚üß x)).
    rewrite IHf1.
    specialize (IHf2 x).
    etransitivity;[ apply ack_c_m, IHf2|].
    transitivity (ack (max k1 k2) (ack (S (max k1 k2)) (sumtuple x))).
    * eapply PeanoNat.Nat.le_trans; [ apply ack_c_m |]; apply ack_c_n; lia.
    * rewrite <-acknm, ack_c; simpl; lia.
  + destruct IHf1 as [k1 IHf1], IHf2 as [k2 IHf2].
    exists (2 + max k1 k2).
    intros x; specialize (IHf1 x); specialize (IHf2 x).
    assert (IHf1' : sumtuple (‚ü¶f1‚üß x) <= ack (max k1 k2) (sumtuple x)) by
        (eapply PeanoNat.Nat.le_trans; [apply IHf1|]; apply ack_c_n; lia).
    assert (IHf2' : sumtuple (‚ü¶f2‚üß x) <= ack (max k1 k2) (sumtuple x)) by
        (eapply PeanoNat.Nat.le_trans; [apply IHf2|]; apply ack_c_n; lia).
    simpl sumtuple.
    eapply PeanoNat.Nat.le_trans;[|apply ack2plus]; simpl; lia.
  + exists 0; intros [? ?]; simpl in *; lia.
  + exists 0; intros [? ?]; simpl in *; lia.
  + destruct IHf1 as [k1 IHf1], IHf2 as [k2 IHf2].
    exists (3 + max k1 k2).
    intros [a n]; specialize (IHf1 a).
    assert (IHf1' : sumtuple (‚ü¶f1‚üß a) <= ack (max k1 k2) (sumtuple a)) by
        (eapply PeanoNat.Nat.le_trans; [apply IHf1|]; apply ack_c_n; lia).
    assert (IHf2' : forall (c : interp_ty œÉ), sumtuple (‚ü¶f2‚üß (a, c)) <= ack (max k1 k2) ((sumtuple a) + (sumtuple c))) by
        (intros c; eapply PeanoNat.Nat.le_trans; [apply IHf2|]; apply ack_c_n; lia).
    remember (max k1 k2) as k;
    clear IHf1 IHf2 Heqk k1 k2.
    cut (sumtuple a + sumtuple (‚ü¶ pr_rec f1 f2 ‚üß (a, n)) <= ack (3 + k) (sumtuple a + n)); [simpl; lia|].
    induction n.
    - rewrite pr_rec_0.
      replace (sumtuple a + 0) with (sumtuple a) by lia.
      apply ack2plusplus.
      * apply PeanoNat.Nat.le_trans with (S (sumtuple a));[lia|].
        rewrite <-(ack0m (sumtuple a)).
        apply ack_c_n; lia.
      * rewrite IHf1'; apply ack_c_n; lia.
    - rewrite pr_rec_1.
      apply PeanoNat.Nat.le_trans with
          (ack (2 + k) ((sumtuple a) + (sumtuple (‚ü¶ pr_rec f1 f2 ‚üß (a, n))))).
      * {
          apply ack2plusplus.
          + apply ack_le_r; lia.
          + rewrite IHf2'; fold interp_ty; lia.
        }
      * { apply PeanoNat.Nat.le_trans with
              (ack (2 + k) (ack (3 + k) (sumtuple a + n))).
          + apply ack_c_m, IHn.
          + rewrite <-acknm.
            apply PeanoNat.Nat.eq_le_incl, f_equal2; lia.
        }
Defined.

(* Si cela vous amuse, vous pouvez regarder la t√™te de la constante correspondant √†
une fonction primitive r√©cursive f en la substituant √† pr_succ ci-dessous. *)
Eval vm_compute in (let (a, _) := ack_pr pr_succ in a).


(* On conclut donc qu'Ackerman n'est pas primitive r√©cursive. *)
Lemma ackdiag_not_pr : forall f : primrec ‚Ñï ‚Ñï, ~ forall n, ‚ü¶f‚üß n = ack n n.
  intros f H.
  destruct (ack_pr f) as [k ?].
  simpl in *.
  specialize (l (S k)).  
  rewrite H in l.
  assert (ack k (S k) < ack (S k) (S k)) by (apply ack_sc_n; lia).
  lia.
Qed.

Lemma ack_not_pr : forall f : primrec (‚Ñï √ó ‚Ñï) ‚Ñï, ~ forall n m, ‚ü¶f‚üß (n,m) = ack n m.
  intros ? ?.
  apply (ackdiag_not_pr (f ‚àò ‚ü® pr_id , pr_id ‚ü©)).
  intros; apply H.
Qed.
